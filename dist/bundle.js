!function(n){var t={};function e(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=n,e.c=t,e.d=function(n,t,r){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:r})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var o in n)e.d(r,o,function(t){return n[t]}.bind(null,o));return r},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=0)}([function(n,t,e){"use strict";e.r(t);var r=function(){return function(n,t){this.toNode=n,this.cost=t}}(),o=function(){return function(n,t,e){this.name=n,this.value=t,this.links=e}}(),i=function(){return function(n,t){this.nodes=n,this.cost=t}}(),s=function(){function n(n){this.shortestLinks=[],this.allNodes=[];for(var t=n.slice(),e=(t=t.sort(function(n,t){return n.cost-t.cost}).reverse()).flatMap(function(n){return n.nodes}),r=new Map,o=0,i=e;o<i.length;o++){var s=i[o];r.has(s.name)||(r.set(s.name,!0),this.allNodes.push(s))}for(this.root=this.allNodes.sort(function(n,t){return n.value-t.value})[0],console.log(t.slice());!this.allNodesAreConnected(this.allNodes);){var u=t.pop();if(this.shortestLinks.push(u),this.allNodesAreConnected(this.allNodes)){for(var c=void 0,a=c=this.shortestLinks.slice();c;)a=c,c=this.tryToRemove(c);a.length<this.shortestLinks.length&&(this.shortestLinks=a)}}console.log(this.shortestLinks)}return n.prototype.allNodesAreConnected=function(n,t){void 0===t&&(t=this.shortestLinks);for(var e=[],r=t.flatMap(function(n){return n.nodes}),o=new Map,i=0,s=r;i<s.length;i++){var u=s[i];o.has(u.name)||(o.set(u.name,!0),e.push(u))}var c,a=e.length===n.length;if(a){var h=this.allNodes.slice(),f=function(n){var e;e=n,h.splice(h.findIndex(function(n){return n.name===e.name}),1),function(n){return t.filter(function(t){return-1!==t.nodes.findIndex(function(t){return t.name===n.name})}).flatMap(function(t){return t.nodes.find(function(t){return t.name!==n.name})}).filter(function(n){return-1!==h.findIndex(function(t){return t.name===n.name})})}(n).forEach(function(n){return f(n)})};f(this.root),c=0===h.length}return a&&c},n.prototype.tryToRemove=function(n){for(var t,e=function(e){var o=n.slice();if(o.splice(o.findIndex(function(n){return n===e}),1),r.allNodesAreConnected(r.allNodes,o))return t=o,"break"},r=this,o=0,i=n;o<i.length;o++){if("break"===e(i[o]))break}return t},n.prototype.linkToString=function(){var n=this.shortestLinks.map(function(n){return new i(n.nodes.sort(function(n,t){return n.name<t.name?-1:n.name>t.name?1:0}),n.cost)}).sort(function(n,t){if(n.nodes[0].name<t.nodes[0].name)return-1;if(n.nodes[0].name>t.nodes[0].name)return 1;if(n.nodes[0].name===t.nodes[0].name){if(n.nodes[1].name<t.nodes[1].name)return-1;if(n.nodes[1].name>t.nodes[1].name)return 1}return 0}),t="";return n.forEach(function(n){t+=n.nodes[0].name+" - "+n.nodes[1].name+";\n\t"}),t},n.prototype.getRoutingTable=function(n){var t=this,e=[];return this.allNodes.filter(function(t){return t.name!==n}).forEach(function(r){e.push({target:r.name,nextHop:t.getNextHop(n,r.name)})}),e},n.prototype.getNextHop=function(n,t,e,r){void 0===r&&(r=[]),console.log(n,t,e),r.push(n);var o=this.shortestLinks.filter(function(t){return-1!==t.nodes.findIndex(function(t){return t.name===n})});if(-1!==o.findIndex(function(n){return-1!==n.nodes.findIndex(function(n){return n.name===t})}))return e||t;for(var i=0,s=o;i<s.length;i++){var u=s[i].nodes.find(function(t){return t.name!==n}).name;if(-1===r.indexOf(u)){var c=this.getNextHop(u,t,e||u,r.slice());if(c)return c}}},n}(),u=function(n,t,e,r){return new(e||(e=Promise))(function(o,i){function s(n){try{c(r.next(n))}catch(n){i(n)}}function u(n){try{c(r.throw(n))}catch(n){i(n)}}function c(n){n.done?o(n.value):new e(function(t){t(n.value)}).then(s,u)}c((r=r.apply(n,t||[])).next())})},c=function(n,t){var e,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;s;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(n,s)}catch(n){i=[6,n],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},a=function(){function n(n,t,e,r){var o=this;this.BLOCKED=function(){return!o.MST},this.DISCOVERED_LINKS=[],this.rootOfIndexing=!1,this.returnTo=[],this.name=n,this.value=t,this.connection=e,this.connection.receive.subscribe(function(n){return o.receive(n)}),this.dumpChanges=function(){return r(o)}}return n.prototype.indexNetwork=function(){return u(this,void 0,void 0,function(){var n,t=this;return c(this,function(e){switch(e.label){case 0:return this.rootOfIndexing=!0,this.dumpChanges(),[4,this.connection.ping];case 1:return n=e.sent(),this.WAITING_FOR_BRIDGES=n,n.forEach(function(n){t.send({protocol:"CSTP",content:{message:"Dear Neighbor hear is my name and the package provides you the cost to me. Follow the CSTP.",from:{name:t.name,value:t.value}},target:n})}),[2]}})})},n.prototype.send=function(n){n.sender=this.name,this.connection.send.next(n)},n.prototype.handleCSTPPackage=function(n){var t,e=this;if(n.content.mst&&(n.content.mst=n.content.mst.slice(),this.finishMST(n.content.mst),this.dumpChanges(),n.destination!==this.name&&(n.target=this.ROUTING_TABLE.find(function(t){return t.target===n.destination}).nextHop,this.send(n))),!(this.INDEXED||this.rootOfIndexing&&n.content.from)){if(0!==this.DISCOVERED_LINKS.length||this.rootOfIndexing||(this.connection.ping.then(function(t){if(e.WAITING_FOR_BRIDGES=t.filter(function(t){return t!==n.content.from.name}),e.dumpChanges(),e.WAITING_FOR_BRIDGES.forEach(function(n){return e.send({protocol:"CSTP",content:{message:"Dear Neighbor hear is my name and the package provides you the cost to me. Follow the CSTP.",from:{name:e.name,value:e.value}},target:n})}),0===e.WAITING_FOR_BRIDGES.length){var r=e.DISCOVERED_LINKS[0].nodes.find(function(n){return n.name!==e.name});if(e.dumpChanges(),e.send({protocol:"CSTP",content:{message:"Dear Neighbor hear are my discovered links, you may concat them with yours and send them back!",discoveredLinks:e.DISCOVERED_LINKS},target:r.name}),e.INDEXED=!0,e.rootOfIndexing){var o=new s(e.DISCOVERED_LINKS);e.MST=o,e.ROUTING_TABLE=e.MST.getRoutingTable(e.name),e.connection.finishedIndexing.next(o)}else e.connection.finishedIndexing.next();e.dumpChanges()}}),this.DISCOVERED_LINKS.push({cost:n.cost,nodes:[{name:this.name,value:this.value},n.content.from]}),this.returnTo.push(n.content.from.name),this.dumpChanges()),this.WAITING_FOR_BRIDGES&&n.content.discoveredLinks){var r=n.content.discoveredLinks[0].nodes.find(function(n){return n.name!==e.name});this.WAITING_FOR_BRIDGES.splice(this.WAITING_FOR_BRIDGES.findIndex(function(n){return n===r}),1),(t=this.DISCOVERED_LINKS).push.apply(t,n.content.discoveredLinks)}else this.WAITING_FOR_BRIDGES&&n.content.from&&(this.WAITING_FOR_BRIDGES.splice(this.WAITING_FOR_BRIDGES.findIndex(function(t){return t===n.content.from.name}),1),this.returnTo.push(n.content.from.name),this.DISCOVERED_LINKS.push({cost:n.cost,nodes:[{name:this.name,value:this.value},n.content.from]}));if(this.dumpChanges(),this.WAITING_FOR_BRIDGES&&0===this.WAITING_FOR_BRIDGES.length){if(this.returnTo.forEach(function(n){e.send({protocol:"CSTP",content:{message:"Dear Neighbor hear are my discovered links, you may concat them with yours and send them back!",discoveredLinks:e.DISCOVERED_LINKS},target:n})}),this.INDEXED=!0,this.rootOfIndexing){var o=[];this.DISCOVERED_LINKS.forEach(function(n){o.find(function(t){return-1!==n.nodes.findIndex(function(n){return n.name===t.nodes[0].name})&&-1!==n.nodes.findIndex(function(n){return n.name===t.nodes[1].name})})||o.push(n)});var i=o.slice();this.finishMST(i),this.ROUTING_TABLE.forEach(function(n){e.send({protocol:"CSTP",content:{message:"Dear Neighbor hear is my name and the package provides you the cost to me. Follow the CSTP.",mst:i},target:n.nextHop,destination:n.target})})}else this.connection.finishedIndexing.next();this.dumpChanges()}}},n.prototype.finishMST=function(n){var t=new s(n);this.MST=t,this.ROUTING_TABLE=this.MST.getRoutingTable(this.name),this.connection.finishedIndexing.next(t)},n.prototype.receive=function(n){"CSTP"===n.protocol?this.handleCSTPPackage(n):this.handlePackage(n)},n.prototype.handlePackage=function(n){this.name===n.destination?alert(this.name+" received a pkg with: "+n.content):(n.target=this.ROUTING_TABLE.find(function(t){return t.target===n.destination}).nextHop,this.send(n))},n}(),h=function(n,t){return(h=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(n,t)};function f(n,t){function e(){this.constructor=n}h(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}function l(n){return"function"==typeof n}var d=!1,p={Promise:void 0,set useDeprecatedSynchronousErrorHandling(n){n&&(new Error).stack;d=n},get useDeprecatedSynchronousErrorHandling(){return d}};function b(n){setTimeout(function(){throw n})}var m={closed:!0,next:function(n){},error:function(n){if(p.useDeprecatedSynchronousErrorHandling)throw n;b(n)},complete:function(){}},g=Array.isArray||function(n){return n&&"number"==typeof n.length};function y(n){return Error.call(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map(function(n,t){return t+1+") "+n.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n,this}y.prototype=Object.create(Error.prototype);var v=y,E=function(){function n(n){this.closed=!1,this._parent=null,this._parents=null,this._subscriptions=null,n&&(this._unsubscribe=n)}var t;return n.prototype.unsubscribe=function(){var n,t=!1;if(!this.closed){var e=this._parent,r=this._parents,o=this._unsubscribe,i=this._subscriptions;this.closed=!0,this._parent=null,this._parents=null,this._subscriptions=null;for(var s,u=-1,c=r?r.length:0;e;)e.remove(this),e=++u<c&&r[u]||null;if(l(o))try{o.call(this)}catch(e){t=!0,n=e instanceof v?_(e.errors):[e]}if(g(i))for(u=-1,c=i.length;++u<c;){var a=i[u];if(null!==(s=a)&&"object"==typeof s)try{a.unsubscribe()}catch(e){t=!0,n=n||[],e instanceof v?n=n.concat(_(e.errors)):n.push(e)}}if(t)throw new v(n)}},n.prototype.add=function(t){var e=t;switch(typeof t){case"function":e=new n(t);case"object":if(e===this||e.closed||"function"!=typeof e.unsubscribe)return e;if(this.closed)return e.unsubscribe(),e;if(!(e instanceof n)){var r=e;(e=new n)._subscriptions=[r]}break;default:if(!t)return n.EMPTY;throw new Error("unrecognized teardown "+t+" added to Subscription.")}if(e._addParent(this)){var o=this._subscriptions;o?o.push(e):this._subscriptions=[e]}return e},n.prototype.remove=function(n){var t=this._subscriptions;if(t){var e=t.indexOf(n);-1!==e&&t.splice(e,1)}},n.prototype._addParent=function(n){var t=this._parent,e=this._parents;return t!==n&&(t?e?-1===e.indexOf(n)&&(e.push(n),!0):(this._parents=[n],!0):(this._parent=n,!0))},n.EMPTY=((t=new n).closed=!0,t),n}();function _(n){return n.reduce(function(n,t){return n.concat(t instanceof v?t.errors:t)},[])}var S="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),w=function(n){function t(e,r,o){var i=n.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=m;break;case 1:if(!e){i.destination=m;break}if("object"==typeof e){e instanceof t?(i.syncErrorThrowable=e.syncErrorThrowable,i.destination=e,e.add(i)):(i.syncErrorThrowable=!0,i.destination=new I(i,e));break}default:i.syncErrorThrowable=!0,i.destination=new I(i,e,r,o)}return i}return f(t,n),t.prototype[S]=function(){return this},t.create=function(n,e,r){var o=new t(n,e,r);return o.syncErrorThrowable=!1,o},t.prototype.next=function(n){this.isStopped||this._next(n)},t.prototype.error=function(n){this.isStopped||(this.isStopped=!0,this._error(n))},t.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,n.prototype.unsubscribe.call(this))},t.prototype._next=function(n){this.destination.next(n)},t.prototype._error=function(n){this.destination.error(n),this.unsubscribe()},t.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},t.prototype._unsubscribeAndRecycle=function(){var n=this._parent,t=this._parents;return this._parent=null,this._parents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parent=n,this._parents=t,this},t}(E),I=function(n){function t(t,e,r,o){var i,s=n.call(this)||this;s._parentSubscriber=t;var u=s;return l(e)?i=e:e&&(i=e.next,r=e.error,o=e.complete,e!==m&&(l((u=Object.create(e)).unsubscribe)&&s.add(u.unsubscribe.bind(u)),u.unsubscribe=s.unsubscribe.bind(s))),s._context=u,s._next=i,s._error=r,s._complete=o,s}return f(t,n),t.prototype.next=function(n){if(!this.isStopped&&this._next){var t=this._parentSubscriber;p.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,this._next,n)&&this.unsubscribe():this.__tryOrUnsub(this._next,n)}},t.prototype.error=function(n){if(!this.isStopped){var t=this._parentSubscriber,e=p.useDeprecatedSynchronousErrorHandling;if(this._error)e&&t.syncErrorThrowable?(this.__tryOrSetError(t,this._error,n),this.unsubscribe()):(this.__tryOrUnsub(this._error,n),this.unsubscribe());else if(t.syncErrorThrowable)e?(t.syncErrorValue=n,t.syncErrorThrown=!0):b(n),this.unsubscribe();else{if(this.unsubscribe(),e)throw n;b(n)}}},t.prototype.complete=function(){var n=this;if(!this.isStopped){var t=this._parentSubscriber;if(this._complete){var e=function(){return n._complete.call(n._context)};p.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?(this.__tryOrSetError(t,e),this.unsubscribe()):(this.__tryOrUnsub(e),this.unsubscribe())}else this.unsubscribe()}},t.prototype.__tryOrUnsub=function(n,t){try{n.call(this._context,t)}catch(n){if(this.unsubscribe(),p.useDeprecatedSynchronousErrorHandling)throw n;b(n)}},t.prototype.__tryOrSetError=function(n,t,e){if(!p.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{t.call(this._context,e)}catch(t){return p.useDeprecatedSynchronousErrorHandling?(n.syncErrorValue=t,n.syncErrorThrown=!0,!0):(b(t),!0)}return!1},t.prototype._unsubscribe=function(){var n=this._parentSubscriber;this._context=null,this._parentSubscriber=null,n.unsubscribe()},t}(w);var x="function"==typeof Symbol&&Symbol.observable||"@@observable";function T(){}function O(n){return n?1===n.length?n[0]:function(t){return n.reduce(function(n,t){return t(n)},t)}:T}var D=function(){function n(n){this._isScalar=!1,n&&(this._subscribe=n)}return n.prototype.lift=function(t){var e=new n;return e.source=this,e.operator=t,e},n.prototype.subscribe=function(n,t,e){var r=this.operator,o=function(n,t,e){if(n){if(n instanceof w)return n;if(n[S])return n[S]()}return n||t||e?new w(n,t,e):new w(m)}(n,t,e);if(r?o.add(r.call(o,this.source)):o.add(this.source||p.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),p.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},n.prototype._trySubscribe=function(n){try{return this._subscribe(n)}catch(t){p.useDeprecatedSynchronousErrorHandling&&(n.syncErrorThrown=!0,n.syncErrorValue=t),!function(n){for(;n;){var t=n,e=t.closed,r=t.destination,o=t.isStopped;if(e||o)return!1;n=r&&r instanceof w?r:null}return!0}(n)?console.warn(t):n.error(t)}},n.prototype.forEach=function(n,t){var e=this;return new(t=N(t))(function(t,r){var o;o=e.subscribe(function(t){try{n(t)}catch(n){r(n),o&&o.unsubscribe()}},r,t)})},n.prototype._subscribe=function(n){var t=this.source;return t&&t.subscribe(n)},n.prototype[x]=function(){return this},n.prototype.pipe=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return 0===n.length?this:O(n)(this)},n.prototype.toPromise=function(n){var t=this;return new(n=N(n))(function(n,e){var r;t.subscribe(function(n){return r=n},function(n){return e(n)},function(){return n(r)})})},n.create=function(t){return new n(t)},n}();function N(n){if(n||(n=p.Promise||Promise),!n)throw new Error("no Promise impl found");return n}function k(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}k.prototype=Object.create(Error.prototype);var B=k,R=function(n){function t(t,e){var r=n.call(this)||this;return r.subject=t,r.subscriber=e,r.closed=!1,r}return f(t,n),t.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var n=this.subject,t=n.observers;if(this.subject=null,t&&0!==t.length&&!n.isStopped&&!n.closed){var e=t.indexOf(this.subscriber);-1!==e&&t.splice(e,1)}}},t}(E),C=function(n){function t(t){var e=n.call(this,t)||this;return e.destination=t,e}return f(t,n),t}(w),L=function(n){function t(){var t=n.call(this)||this;return t.observers=[],t.closed=!1,t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return f(t,n),t.prototype[S]=function(){return new C(this)},t.prototype.lift=function(n){var t=new P(this,this);return t.operator=n,t},t.prototype.next=function(n){if(this.closed)throw new B;if(!this.isStopped)for(var t=this.observers,e=t.length,r=t.slice(),o=0;o<e;o++)r[o].next(n)},t.prototype.error=function(n){if(this.closed)throw new B;this.hasError=!0,this.thrownError=n,this.isStopped=!0;for(var t=this.observers,e=t.length,r=t.slice(),o=0;o<e;o++)r[o].error(n);this.observers.length=0},t.prototype.complete=function(){if(this.closed)throw new B;this.isStopped=!0;for(var n=this.observers,t=n.length,e=n.slice(),r=0;r<t;r++)e[r].complete();this.observers.length=0},t.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},t.prototype._trySubscribe=function(t){if(this.closed)throw new B;return n.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(n){if(this.closed)throw new B;return this.hasError?(n.error(this.thrownError),E.EMPTY):this.isStopped?(n.complete(),E.EMPTY):(this.observers.push(n),new R(this,n))},t.prototype.asObservable=function(){var n=new D;return n.source=this,n},t.create=function(n,t){return new P(n,t)},t}(D),P=function(n){function t(t,e){var r=n.call(this)||this;return r.destination=t,r.source=e,r}return f(t,n),t.prototype.next=function(n){var t=this.destination;t&&t.next&&t.next(n)},t.prototype.error=function(n){var t=this.destination;t&&t.error&&this.destination.error(n)},t.prototype.complete=function(){var n=this.destination;n&&n.complete&&this.destination.complete()},t.prototype._subscribe=function(n){return this.source?this.source.subscribe(n):E.EMPTY},t}(L),M=function(){return function(n){this.send=new L,this.receive=new L,this.finishedIndexing=new L,this.ping=new Promise(function(t){return t(n)})}}(),A=function(){return function(n,t,e,r){var o=this;this.protocol=n,this.content=t,this.target=e,this.destination=e;var i=r.find(function(n){return n.target===o.target});i||console.log("no"),this.target=i.nextHop}}(),G=function(){var n=document.getElementById("container_target");n.childNodes.forEach(function(n){return n.remove()}),n.childNodes.forEach(function(n){return n.remove()}),n.childNodes.forEach(function(n){return n.remove()});n.insertAdjacentElement("beforeend",(new DOMParser).parseFromString('\n<div class="item" id="init_pkg" style="display: flex">\n    <div style="height: 100%; width: 90%; justify-self: center; align-self: center">\n        <h3>Packages:</h3>\n        <div id="pkg_s_target">\n    </div>\n</div>\n    \n</div>\n',"text/html").getElementById("init_pkg"))},j=function(n){var t=document.getElementById("container_target");n.sort(function(n,t){return n.name<t.name?-1:n.name>t.name?1:0}).forEach(function(n){t.insertAdjacentElement("beforeend",(new DOMParser).parseFromString(function(n){return'\n<div class="item">\n    <div class="item-content" id="bridge_'+n.value+'">\n        <h3>Bridge '+n.name+"</h3>\n    <div>\n</div>\n"}(n),"text/html").getElementById("bridge_"+n.value))})},F=0,K=function(n,t){var e=document.getElementById("pkg_s_target"),r=F++;return e.insertAdjacentElement("beforeend",(new DOMParser).parseFromString(function(n,t){return'\n<div id="pkg_'+r+'">\n    '+t+" -> "+n.target+" : "+n.cost+"\n</div>\n"}(n,t),"text/html").getElementById("pkg_"+r)),function(){e.removeChild(document.getElementById("pkg_"+r))}},H=function(n,t){if(-1===t.findIndex(function(n){return n.BLOCKED()})){var e=document.getElementById("pkg_test_target");e.insertAdjacentElement("beforeend",(new DOMParser).parseFromString('\n<div class="item" id="pkg-card" style="\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n">\n    <h3>Send a sample package through with the new topology</h3>\n</div>\n',"text/html").getElementById("pkg-card")),e=document.getElementById("pkg-card");var r=t.map(function(n){return n.name}),o=function(n){return'\n<label id="l_'+n+'" for="'+n+'">Send '+n+':</label>\n<select id="'+n+'">\n    '+r.map(function(n){return'<option value="'+n+'">'+n+"</option>\n    "})+"\n</select>\n"},i=function(n){e.insertAdjacentElement("beforeend",(new DOMParser).parseFromString(o(n)+"<br>","text/html").getElementById("l_"+n)),e.insertAdjacentElement("beforeend",(new DOMParser).parseFromString(o(n),"text/html").getElementById(n))};i("from"),i("to");e.insertAdjacentElement("beforeend",(new DOMParser).parseFromString('\n<button id="test_send">Send</button>\n',"text/html").getElementById("test_send")),document.getElementById("test_send").addEventListener("click",function(){return function(){console.log("sending");var n=document.getElementById("from").value,e=document.getElementById("to").value,r=t.find(function(t){return t.name===n}),o=new A("SOME_NORMAL","Greetings from"+r.name,e,r.ROUTING_TABLE);console.log("here",o),r.send(o)}()})}document.getElementById("bridge_"+n.value).replaceWith((new DOMParser).parseFromString(function(n){return'\n<div class="item" id="bridge_'+n.value+'">\n    <div class="item-content" style="width: 80%; height: 100%; overflow-y: auto; overflow-x: hidden; '+(n.BLOCKED()?"":"box-shadow: 5px 5px 4px #33b040 !important;")+'">\n        <h3>Bridge '+n.name+"</h3>\n        "+(n.rootOfIndexing?"Indexing Root!":"")+"<br>\n        Known links: [<br><BLOCKQUOTE>"+n.DISCOVERED_LINKS.map(function(n){return n.nodes.map(function(n){return n.name}).join("-")+":"+n.cost}).join(",<br>")+"</BLOCKQUOTE><br>]<br>\n        "+(!n.rootOfIndexing&&n.INDEXED?"<br>Node has finished indexing!<br>Returning Data to: [<br><BLOCKQUOTE>"+n.returnTo.join(",<br>")+"</BLOCKQUOTE><br>]":"")+"\n        "+(n.rootOfIndexing&&n.INDEXED?"<br>Network has finished indexing!<br>MST generated.<br>Sending MST to: [<br><BLOCKQUOTE>"+n.MST.allNodes.map(function(n){return n.name}).filter(function(t){return t!==n.name}).join(",<br>")+"</BLOCKQUOTE><br>]":"")+"\n        "+(n.BLOCKED()?"":"<br>Received MST. Routing Table: [<br><BLOCKQUOTE>"+n.ROUTING_TABLE.map(function(n){return"->"+n.target+" via "+n.nextHop}).join(",<br>")+"</BLOCKQUOTE><br>]")+"\n    </div>\n</div>\n"}(n),"text/html").getElementById("bridge_"+n.value))},U=function(n,t,e,r){return new(e||(e=Promise))(function(o,i){function s(n){try{c(r.next(n))}catch(n){i(n)}}function u(n){try{c(r.throw(n))}catch(n){i(n)}}function c(n){n.done?o(n.value):new e(function(t){t(n.value)}).then(s,u)}c((r=r.apply(n,t||[])).next())})},V=function(n,t){var e,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;s;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(n,s)}catch(n){i=[6,n],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},W=function(){return function(n,t){void 0===t&&(t=.5);var e=this;this.nodes=n,this.multiForCostInSeconds=t,this.bridges=[],this.startIndexingFromRandomBridge=function(){return new Promise(function(n){return U(e,void 0,void 0,function(){var t;return V(this,function(e){switch(e.label){case 0:return(t=this.bridges[Math.round(Math.random()*this.bridges.length)]).connection.finishedIndexing.subscribe(function(t){return n(t)}),[4,t.indexNetwork()];case 1:return e.sent(),[2]}})})})},G(),n.forEach(function(n){var t=n.links.map(function(n){return n.toNode}),r=new M(t);e.bridges.push(new a(n.name,n.value,r,function(n){return H(n,e.bridges)}))}),this.bridges.forEach(function(t){var r=n.find(function(n){return n.name===t.name}).links,o=r.map(function(n){return n.toNode});t.connection.send.subscribe(function(n){if(console.log(t.name+">>>"+n.target),o.find(function(t){return t===n.target})){n.cost=r.find(function(t){return t.toNode===n.target}).cost;var i=K(n,t.name);setTimeout(function(){i(),e.bridges.find(function(t){return t.name===n.target}).connection.receive.next(n)},1e3*n.cost*e.multiForCostInSeconds)}})}),j(this.bridges)}}(),Q=document.getElementById("textIn"),X=document.getElementById("textOut"),Y=document.getElementById("simulate_btn");Q.value="\nGraph mygraph {\n\t// Node\n\tA = 5;\n\tB = 1;\n\tC = 3;\n\tD = 7;\n\tE = 6;\n\tF = 4;\n\t\n\t// Links und zugeh. Kosten\n\tA - B : 10;\n\tA - C : 10;\n\tB - D : 15;\n\tB - E : 10;\n\tC - D : 3;\n\tC - E : 10;\n\tD - E : 2;\n\tD - F : 10;\n\tE - F : 2;\n}";Y.addEventListener("click",function(){var n=function(n){for(var t=[],e=[],i=n.match(/(?<=Graph[ ])(\S+)/g)[0],s=n.match(/[^\s]+(?= =)|(?<== )[1-9]*/g),u=n.match(/[^\s]+(?= -)|[^\s]+(?= :)|(?<=: )[0-9]*/g),c=0;c<u.length;c+=3)t.push({nodes:[u[c],u[c+1]],cost:+u[c+2]});var a=function(n){var i=s[n],u=+s[n+1],c=t.filter(function(n){return-1!==n.nodes.findIndex(function(n){return n===i})}).map(function(n){return new r(n.nodes.find(function(n){return n!==i}),n.cost)});e.push(new o(i,u,c))};for(c=0;c<s.length;c+=2)a(c);return{graphName:i,nodes:e}}(Q.value);new W(n.nodes,+document.getElementById("mult").value).startIndexingFromRandomBridge().then(function(t){var e;X.value=(e=t,"\nSpanning-Tree of "+n.graphName+" {\n\tRoot: "+e.root.name+";\n\t"+e.linkToString()+"\n}")})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
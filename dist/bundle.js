!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";e.r(n);var r=function(){return function(t,n){this.toNode=t,this.cost=n}}(),o=function(){return function(t,n,e){this.name=t,this.value=n,this.links=e}}(),i=function(){return function(t,n){this.nodes=t,this.cost=n}}(),s=function(){function t(t){this.shortestLinks=[],this.allNodes=[];for(var n=t.slice(),e=(n=n.sort(function(t,n){return t.cost-n.cost}).reverse()).flatMap(function(t){return t.nodes}),r=new Map,o=0,i=e;o<i.length;o++){var s=i[o];r.has(s.name)||(r.set(s.name,!0),this.allNodes.push(s))}for(this.root=this.allNodes.sort(function(t,n){return t.value-n.value})[0];!this.allNodesAreConnected(this.allNodes);)this.shortestLinks.push(n.pop());this.shortestLinks.length}return t.prototype.getNextNodeWhenGoing=function(t,n){return this.getNextStep(t,n)},t.prototype.getNextStep=function(t,n,e,r){if(t.name===n.name)return e;for(var o=0,i=this.shortestLinks.filter(function(n){return-1!==n.nodes.findIndex(function(n){return n.name===t.name})}).map(function(n){return n.nodes.find(function(n){return n.name!==t.name})}).filter(function(t){return!r||t.name!==r});o<i.length;o++){var s=i[o],u=void 0;if(u=e?this.getNextStep(s,n,e,t):this.getNextStep(s,n,s,t))return u}},t.prototype.allNodesAreConnected=function(t){for(var n=[],e=this.shortestLinks.flatMap(function(t){return t.nodes}),r=new Map,o=0,i=e;o<i.length;o++){var s=i[o];r.has(s.name)||(r.set(s.name,!0),n.push(s))}var u=n.length===t.length;if(u){var c=this.shortestLinks[0].nodes[0];this.getConnectedNodes(c);this.allNodes}return u&&!0},t.prototype.getConnectedNodes=function(t,n){var e=this;return void 0===n&&(n=[]),this.shortestLinks.filter(function(e){return-1!==e.nodes.findIndex(function(e){return e.name===t.name&&-1===n.findIndex(function(t){return t.name===e.name})})}).forEach(function(r){var o=r.nodes.find(function(n){return n.name!==t.name});n.push(o),n.push.apply(n,e.getConnectedNodes(o))}),n},t.prototype.linkToString=function(){var t=this.shortestLinks.map(function(t){return new i(t.nodes.sort(function(t,n){return t.name<n.name?-1:t.name>n.name?1:0}),t.cost)}).sort(function(t,n){if(t.nodes[0].name<n.nodes[0].name)return-1;if(t.nodes[0].name>n.nodes[0].name)return 1;if(t.nodes[0].name===n.nodes[0].name){if(t.nodes[1].name<n.nodes[1].name)return-1;if(t.nodes[1].name>n.nodes[1].name)return 1}return 0}),n="";return t.forEach(function(t){n+=t.nodes[0].name+" - "+t.nodes[1].name+";\n\t"}),n},t}(),u=function(t,n,e,r){return new(e||(e=Promise))(function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function u(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new e(function(n){n(t.value)}).then(s,u)}c((r=r.apply(t,n||[])).next())})},c=function(t,n){var e,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;s;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=n.call(t,s)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},a=function(){function t(t,n,e){var r=this;this.rootOfIndexing=!1,this.returnTo=[],this.DISCOVERED_LINKS=[],this.name=t,this.value=n,this.connection=e,this.connection.receive.subscribe(function(t){return r.receive(t)})}return t.prototype.indexNetwork=function(){return u(this,void 0,void 0,function(){var t,n=this;return c(this,function(e){switch(e.label){case 0:return this.rootOfIndexing=!0,[4,this.connection.ping];case 1:return t=e.sent(),this.WAITING_FOR_BRIDGES=t,t.forEach(function(t){n.send({protocol:"CSTP",content:{message:"Dear Neighbor hear is my name and the package provides you the cost to me. Follow the CSTP.",from:{name:n.name,value:n.value}},target:t})}),[2]}})})},t.prototype.send=function(t){this.connection.send.next(t)},t.prototype.handleCSTPPackage=function(t){var n,e=this;if(!this.INDEXED){if(console.log(this.name,"received pkg"),0!==this.DISCOVERED_LINKS.length||this.rootOfIndexing||(this.connection.ping.then(function(n){if(e.WAITING_FOR_BRIDGES=n.filter(function(n){return n!==t.content.from.name}),console.log(e.name," waiting for:",e.WAITING_FOR_BRIDGES),e.WAITING_FOR_BRIDGES.forEach(function(t){return e.send({protocol:"CSTP",content:{message:"Dear Neighbor hear is my name and the package provides you the cost to me. Follow the CSTP.",from:{name:e.name,value:e.value}},target:t})}),0===e.WAITING_FOR_BRIDGES.length){var r=e.DISCOVERED_LINKS[0].nodes.find(function(t){return t.name!==e.name});if(e.send({protocol:"CSTP",content:{message:"Dear Neighbor hear are my discovered links, you may concat them with yours and send them back!",discoveredLinks:e.DISCOVERED_LINKS},target:r.name}),e.INDEXED=!0,e.rootOfIndexing){var o=new s(e.DISCOVERED_LINKS);e.connection.finishedIndexing.next(o)}else e.connection.finishedIndexing.next()}}),this.DISCOVERED_LINKS.push({cost:t.cost,nodes:[{name:this.name,value:this.value},t.content.from]}),this.returnTo.push(t.content.from.name),console.log("returning from ",this.name,"to ",this.returnTo)),this.WAITING_FOR_BRIDGES&&t.content.discoveredLinks){var r=t.content.discoveredLinks[0].nodes.find(function(t){return t.name!==e.name});this.WAITING_FOR_BRIDGES.splice(this.WAITING_FOR_BRIDGES.findIndex(function(t){return t===r}),1),console.log(this.name," waiting for:",this.WAITING_FOR_BRIDGES),(n=this.DISCOVERED_LINKS).push.apply(n,t.content.discoveredLinks)}else this.WAITING_FOR_BRIDGES&&t.content.from&&(this.WAITING_FOR_BRIDGES.splice(this.WAITING_FOR_BRIDGES.findIndex(function(n){return n===t.content.from.name}),1),console.log(this.name," waiting for:",this.WAITING_FOR_BRIDGES),this.returnTo.push(t.content.from.name),console.log("returning from ",this.name,"to ",this.returnTo),this.DISCOVERED_LINKS.push({cost:t.cost,nodes:[{name:this.name,value:this.value},t.content.from]}));if(this.WAITING_FOR_BRIDGES&&0===this.WAITING_FOR_BRIDGES.length)if(this.returnTo.forEach(function(t){e.send({protocol:"CSTP",content:{message:"Dear Neighbor hear are my discovered links, you may concat them with yours and send them back!",discoveredLinks:e.DISCOVERED_LINKS},target:t})}),this.INDEXED=!0,console.log("Node has finished ",this.name),this.rootOfIndexing){var o=[];this.DISCOVERED_LINKS.forEach(function(t){o.find(function(n){return-1!==t.nodes.findIndex(function(t){return t.name===n.nodes[0].name})&&-1!==t.nodes.findIndex(function(t){return t.name===n.nodes[1].name})})||o.push(t)});var i=new s(o);this.connection.finishedIndexing.next(i)}else this.connection.finishedIndexing.next()}},t.prototype.receive=function(t){"CSTP"===t.protocol&&this.handleCSTPPackage(t)},t}(),h=function(t,n){return(h=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)};function f(t,n){function e(){this.constructor=t}h(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}function l(t){return"function"==typeof t}var p=!1,d={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;p=t},get useDeprecatedSynchronousErrorHandling(){return p}};function b(t){setTimeout(function(){throw t})}var y={closed:!0,next:function(t){},error:function(t){if(d.useDeprecatedSynchronousErrorHandling)throw t;b(t)},complete:function(){}},m=Array.isArray||function(t){return t&&"number"==typeof t.length};function v(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map(function(t,n){return n+1+") "+t.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}v.prototype=Object.create(Error.prototype);var g=v,_=function(){function t(t){this.closed=!1,this._parent=null,this._parents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}var n;return t.prototype.unsubscribe=function(){var t,n=!1;if(!this.closed){var e=this._parent,r=this._parents,o=this._unsubscribe,i=this._subscriptions;this.closed=!0,this._parent=null,this._parents=null,this._subscriptions=null;for(var s,u=-1,c=r?r.length:0;e;)e.remove(this),e=++u<c&&r[u]||null;if(l(o))try{o.call(this)}catch(e){n=!0,t=e instanceof g?E(e.errors):[e]}if(m(i))for(u=-1,c=i.length;++u<c;){var a=i[u];if(null!==(s=a)&&"object"==typeof s)try{a.unsubscribe()}catch(e){n=!0,t=t||[],e instanceof g?t=t.concat(E(e.errors)):t.push(e)}}if(n)throw new g(t)}},t.prototype.add=function(n){var e=n;switch(typeof n){case"function":e=new t(n);case"object":if(e===this||e.closed||"function"!=typeof e.unsubscribe)return e;if(this.closed)return e.unsubscribe(),e;if(!(e instanceof t)){var r=e;(e=new t)._subscriptions=[r]}break;default:if(!n)return t.EMPTY;throw new Error("unrecognized teardown "+n+" added to Subscription.")}if(e._addParent(this)){var o=this._subscriptions;o?o.push(e):this._subscriptions=[e]}return e},t.prototype.remove=function(t){var n=this._subscriptions;if(n){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}},t.prototype._addParent=function(t){var n=this._parent,e=this._parents;return n!==t&&(n?e?-1===e.indexOf(t)&&(e.push(t),!0):(this._parents=[t],!0):(this._parent=t,!0))},t.EMPTY=((n=new t).closed=!0,n),t}();function E(t){return t.reduce(function(t,n){return t.concat(n instanceof g?n.errors:n)},[])}var w="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),S=function(t){function n(e,r,o){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=y;break;case 1:if(!e){i.destination=y;break}if("object"==typeof e){e instanceof n?(i.syncErrorThrowable=e.syncErrorThrowable,i.destination=e,e.add(i)):(i.syncErrorThrowable=!0,i.destination=new I(i,e));break}default:i.syncErrorThrowable=!0,i.destination=new I(i,e,r,o)}return i}return f(n,t),n.prototype[w]=function(){return this},n.create=function(t,e,r){var o=new n(t,e,r);return o.syncErrorThrowable=!1,o},n.prototype.next=function(t){this.isStopped||this._next(t)},n.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},n.prototype._unsubscribeAndRecycle=function(){var t=this._parent,n=this._parents;return this._parent=null,this._parents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parent=t,this._parents=n,this},n}(_),I=function(t){function n(n,e,r,o){var i,s=t.call(this)||this;s._parentSubscriber=n;var u=s;return l(e)?i=e:e&&(i=e.next,r=e.error,o=e.complete,e!==y&&(l((u=Object.create(e)).unsubscribe)&&s.add(u.unsubscribe.bind(u)),u.unsubscribe=s.unsubscribe.bind(s))),s._context=u,s._next=i,s._error=r,s._complete=o,s}return f(n,t),n.prototype.next=function(t){if(!this.isStopped&&this._next){var n=this._parentSubscriber;d.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?this.__tryOrSetError(n,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},n.prototype.error=function(t){if(!this.isStopped){var n=this._parentSubscriber,e=d.useDeprecatedSynchronousErrorHandling;if(this._error)e&&n.syncErrorThrowable?(this.__tryOrSetError(n,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(n.syncErrorThrowable)e?(n.syncErrorValue=t,n.syncErrorThrown=!0):b(t),this.unsubscribe();else{if(this.unsubscribe(),e)throw t;b(t)}}},n.prototype.complete=function(){var t=this;if(!this.isStopped){var n=this._parentSubscriber;if(this._complete){var e=function(){return t._complete.call(t._context)};d.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?(this.__tryOrSetError(n,e),this.unsubscribe()):(this.__tryOrUnsub(e),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(t,n){try{t.call(this._context,n)}catch(t){if(this.unsubscribe(),d.useDeprecatedSynchronousErrorHandling)throw t;b(t)}},n.prototype.__tryOrSetError=function(t,n,e){if(!d.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{n.call(this._context,e)}catch(n){return d.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=n,t.syncErrorThrown=!0,!0):(b(n),!0)}return!1},n.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},n}(S);var x="function"==typeof Symbol&&Symbol.observable||"@@observable";function T(){}function N(t){return t?1===t.length?t[0]:function(n){return t.reduce(function(t,n){return n(t)},n)}:T}var O=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r=this.operator,o=function(t,n,e){if(t){if(t instanceof S)return t;if(t[w])return t[w]()}return t||n||e?new S(t,n,e):new S(y)}(t,n,e);if(r?o.add(r.call(o,this.source)):o.add(this.source||d.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),d.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){d.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=n),!function(t){for(;t;){var n=t,e=n.closed,r=n.destination,o=n.isStopped;if(e||o)return!1;t=r&&r instanceof S?r:null}return!0}(t)?console.warn(n):t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=D(n))(function(n,r){var o;o=e.subscribe(function(n){try{t(n)}catch(t){r(t),o&&o.unsubscribe()}},r,n)})},t.prototype._subscribe=function(t){var n=this.source;return n&&n.subscribe(t)},t.prototype[x]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 0===t.length?this:N(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=D(t))(function(t,e){var r;n.subscribe(function(t){return r=t},function(t){return e(t)},function(){return t(r)})})},t.create=function(n){return new t(n)},t}();function D(t){if(t||(t=d.Promise||Promise),!t)throw new Error("no Promise impl found");return t}function k(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}k.prototype=Object.create(Error.prototype);var R=k,G=function(t){function n(n,e){var r=t.call(this)||this;return r.subject=n,r.subscriber=e,r.closed=!1,r}return f(n,t),n.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,n=t.observers;if(this.subject=null,n&&0!==n.length&&!t.isStopped&&!t.closed){var e=n.indexOf(this.subscriber);-1!==e&&n.splice(e,1)}}},n}(_),P=function(t){function n(n){var e=t.call(this,n)||this;return e.destination=n,e}return f(n,t),n}(S),C=function(t){function n(){var n=t.call(this)||this;return n.observers=[],n.closed=!1,n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return f(n,t),n.prototype[w]=function(){return new P(this)},n.prototype.lift=function(t){var n=new L(this,this);return n.operator=t,n},n.prototype.next=function(t){if(this.closed)throw new R;if(!this.isStopped)for(var n=this.observers,e=n.length,r=n.slice(),o=0;o<e;o++)r[o].next(t)},n.prototype.error=function(t){if(this.closed)throw new R;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var n=this.observers,e=n.length,r=n.slice(),o=0;o<e;o++)r[o].error(t);this.observers.length=0},n.prototype.complete=function(){if(this.closed)throw new R;this.isStopped=!0;for(var t=this.observers,n=t.length,e=t.slice(),r=0;r<n;r++)e[r].complete();this.observers.length=0},n.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},n.prototype._trySubscribe=function(n){if(this.closed)throw new R;return t.prototype._trySubscribe.call(this,n)},n.prototype._subscribe=function(t){if(this.closed)throw new R;return this.hasError?(t.error(this.thrownError),_.EMPTY):this.isStopped?(t.complete(),_.EMPTY):(this.observers.push(t),new G(this,t))},n.prototype.asObservable=function(){var t=new O;return t.source=this,t},n.create=function(t,n){return new L(t,n)},n}(O),L=function(t){function n(n,e){var r=t.call(this)||this;return r.destination=n,r.source=e,r}return f(n,t),n.prototype.next=function(t){var n=this.destination;n&&n.next&&n.next(t)},n.prototype.error=function(t){var n=this.destination;n&&n.error&&this.destination.error(t)},n.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},n.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):_.EMPTY},n}(C),A=function(){return function(t){this.send=new C,this.receive=new C,this.finishedIndexing=new C,this.ping=new Promise(function(n){return n(t)})}}(),B=function(t,n,e,r){return new(e||(e=Promise))(function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function u(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new e(function(n){n(t.value)}).then(s,u)}c((r=r.apply(t,n||[])).next())})},j=function(t,n){var e,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;s;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=n.call(t,s)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},F=function(){return function(t){var n=this;this.nodes=t,this.bridges=[],this.startIndexingFromRandomBridge=function(){return new Promise(function(t){return B(n,void 0,void 0,function(){var n;return j(this,function(e){return n=this.bridges[Math.round(Math.random()*this.bridges.length)],console.log(this.bridges,n),n.connection.finishedIndexing.subscribe(function(n){return t(n)}),n.indexNetwork().then(function(){return console.log("wtf")}),[2]})})})},t.forEach(function(t){var e=t.links.map(function(t){return t.toNode}),r=new A(e);n.bridges.push(new a(t.name,t.value,r))}),this.bridges.forEach(function(e){var r=t.find(function(t){return t.name===e.name}).links,o=r.map(function(t){return t.toNode});e.connection.send.subscribe(function(t){console.log(e.name+">>>"+t.target),o.find(function(n){return n===t.target})&&(t.cost=r.find(function(n){return n.toNode===t.target}).cost,setTimeout(function(){return n.bridges.find(function(n){return n.name===t.target}).connection.receive.next(t)},1e3*t.cost))})})}}(),M=document.getElementById("textIn"),W=document.getElementById("textOut"),V=document.getElementById("simulate_btn");M.value="\nGraph mygraph {\n\t// Node\n\tA = 2;\n\tB = 1;\n\tC = 3;\n\t\n\t// Links und zugeh. Kosten\n\tA - B : 1;\n\tA - C : 1;\n\tC - B : 2;\n}",console.log(M);V.addEventListener("click",function(){var t=function(t){for(var n=[],e=[],i=t.match(/(?<=Graph[ ])(\S+)/g)[0],s=t.match(/[^\s]+(?= =)|(?<== )[1-9]*/g),u=t.match(/[^\s]+(?= -)|[^\s]+(?= :)|(?<=: )[0-9]*/g),c=0;c<u.length;c+=3)n.push({nodes:[u[c],u[c+1]],cost:+u[c+2]});var a=function(t){var i=s[t],u=+s[t+1],c=n.filter(function(t){return-1!==t.nodes.findIndex(function(t){return t===i})}).map(function(t){return new r(t.nodes.find(function(t){return t!==i}),t.cost)});e.push(new o(i,u,c))};for(c=0;c<s.length;c+=2)a(c);return{graphName:i,nodes:e}}(M.value),n=new F(t.nodes);console.log(n),n.startIndexingFromRandomBridge().then(function(n){var e;W.value=(e=n,"\nSpanning-Tree of "+t.graphName+" {\n\tRoot: "+e.root.name+";\n\t"+e.linkToString()+"\n}")})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
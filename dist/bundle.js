!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=1)}([function(t,n,e){var r,o,i;o=[t,n],void 0===(i="function"==typeof(r=function(t,n){"use strict";function e(t,n,e){this._parent=new Array(t),this._rank=new Array(t),this._numSubsets=t,this._subsetProps=new Array(t),this._subsetPropsReducer=n;var r=void 0;r="[object Function]"==Object.prototype.toString.call(e)?e:function(){return e};for(var o=0;o<t;o++)this._parent[o]=o,this._rank[o]=0,this._subsetProps[o]=Object.assign({},r(o))}Object.defineProperty(n,"__esModule",{value:!0}),e.prototype.find=function(t){return this._parent[t]!==t&&(this._parent[t]=this.find(this._parent[t])),this._parent[t]},e.prototype.isConnected=function(t,n){return this.find(t)===this.find(n)},e.prototype.union=function(t,n,e){var r=this.find(t),o=this.find(n);return r===o?r:this._rank[r]<this._rank[o]?(this._parent[r]=o,this._numSubsets-=1,this._subsetPropsReducer&&(this._subsetProps[o]=this._subsetPropsReducer(this._subsetProps[o],this._subsetProps[r],e),this._subsetProps[r]=null),o):(this._parent[o]=r,this._numSubsets-=1,this._subsetPropsReducer&&(this._subsetProps[r]=this._subsetPropsReducer(this._subsetProps[r],this._subsetProps[o],e),this._subsetProps[o]=null),this._rank[r]===this._rank[o]&&(this._rank[r]+=1),r)},e.prototype.subsets=function(){for(var t={},n=0;n<this._parent.length;n++){var e=this.find(n);t.hasOwnProperty(e)||(t[e]=[]),t[e].push(n)}return Object.keys(t).map(function(n){return t[n]}).map(function(t){return t.sort()}).sort(function(t,n){return t[0]-n[0]})},e.prototype.subset=function(t){for(var n=this.find(t),e=[],r=0;r<this._parent.length;r++)this.find(r)===n&&e.push(r);return e.sort(),e},e.prototype.numSubsets=function(){return this._numSubsets},e.prototype.subsetProps=function(t){return this._subsetProps[this.find(t)]},n.default=e,t.exports=n.default})?r.apply(n,o):r)||(t.exports=i)},function(t,n,e){"use strict";e.r(n);var r=function(){return function(t,n){this.toNode=t,this.cost=n}}(),o=function(){return function(t,n,e){this.name=t,this.value=n,this.links=e}}(),i=function(){return function(t,n){this.nodes=t,this.cost=n}}(),s=e(0),u=function(){function t(t){this.shortestLinks=[],this.allNodes=[];for(var n=t.slice(),e=(n=n.sort(function(t,n){return t.cost-n.cost}).reverse()).flatMap(function(t){return t.nodes}),r=new Map,o=0,i=e;o<i.length;o++){var s=i[o];r.has(s.name)||(r.set(s.name,!0),this.allNodes.push(s))}this.root=this.allNodes.sort(function(t,n){return t.value-n.value})[0],this.shortestLinks=this.kruskal(n,n.length)}return t.prototype.linkToString=function(){var t=this.shortestLinks.map(function(t){return new i(t.nodes.sort(function(t,n){return t.name<n.name?-1:t.name>n.name?1:0}),t.cost)}).sort(function(t,n){if(t.nodes[0].name<n.nodes[0].name)return-1;if(t.nodes[0].name>n.nodes[0].name)return 1;if(t.nodes[0].name===n.nodes[0].name){if(t.nodes[1].name<n.nodes[1].name)return-1;if(t.nodes[1].name>n.nodes[1].name)return 1}return 0}),n="";return t.forEach(function(t){n+=t.nodes[0].name+" - "+t.nodes[1].name+";\n\t"}),n},t.prototype.getRoutingTable=function(t){var n=this,e=[];return this.allNodes.filter(function(n){return n.name!==t}).forEach(function(r){e.push({target:r.name,nextHop:n.getNextHop(t,r.name)})}),e},t.prototype.getNextHop=function(t,n,e,r){void 0===r&&(r=[]),console.log(t,n,e),r.push(t);var o=this.shortestLinks.filter(function(n){return-1!==n.nodes.findIndex(function(n){return n.name===t})});if(-1!==o.findIndex(function(t){return-1!==t.nodes.findIndex(function(t){return t.name===n})}))return e||n;for(var i=0,s=o;i<s.length;i++){var u=s[i].nodes.find(function(n){return n.name!==t}).name;if(-1===r.indexOf(u)){var c=this.getNextHop(u,n,e||u,r.slice());if(c)return c}}},t.prototype.kruskal=function(t,n){for(var e=this,r=new s(this.allNodes.length),o=function(t){return t.nodes.map(function(t){return e.allNodes.findIndex(function(n){return n.name===t.name})})},i=[];t.length>0;){var u=t.pop();r.isConnected.apply(r,o(u))||(r.union.apply(r,o(u)),i.push(u))}return i},t}(),c=function(t,n,e,r){return new(e||(e=Promise))(function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function u(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new e(function(n){n(t.value)}).then(s,u)}c((r=r.apply(t,n||[])).next())})},a=function(t,n){var e,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;s;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=n.call(t,s)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},h=function(){function t(t,n,e,r){var o=this;this.BLOCKED=function(){return!o.MST},this.DISCOVERED_LINKS=[],this.rootOfIndexing=!1,this.returnTo=[],this.name=t,this.value=n,this.connection=e,this.connection.receive.subscribe(function(t){return o.receive(t)}),this.dumpChanges=function(){return r(o)}}return t.prototype.indexNetwork=function(){return c(this,void 0,void 0,function(){var t,n=this;return a(this,function(e){switch(e.label){case 0:return this.rootOfIndexing=!0,this.dumpChanges(),[4,this.connection.ping];case 1:return t=e.sent(),this.WAITING_FOR_BRIDGES=t,t.forEach(function(t){n.send({protocol:"CSTP",content:{message:"Dear Neighbor hear is my name and the package provides you the cost to me. Follow the CSTP.",from:{name:n.name,value:n.value}},target:t})}),[2]}})})},t.prototype.send=function(t){t.sender=this.name,this.connection.send.next(t)},t.prototype.receive=function(t){"CSTP"===t.protocol?this.handleCSTPPackage(t).then(function(){}):this.handlePackage(t)},t.prototype.handlePackage=function(t){this.name===t.destination?alert(this.name+" received a pkg with: "+t.content):(t.target=this.ROUTING_TABLE.find(function(n){return n.target===t.destination}).nextHop,this.send(t))},t.prototype.handleCSTPPackage=function(t){return c(this,void 0,void 0,function(){var n,e;return a(this,function(r){switch(r.label){case 0:return 3!==(n=this.buildCase(t.content)).id?[3,1]:(this.handleCase3(t,n),this.dumpChanges(),[3,4]);case 1:return this.INDEXED||1===n.id&&this.WAITING_FOR_BRIDGES&&-1===this.WAITING_FOR_BRIDGES.indexOf(n.content.name)?[2]:!(e=0===this.DISCOVERED_LINKS.length)||this.rootOfIndexing||1!==n.id?[3,3]:(this.DISCOVERED_LINKS.push({cost:t.cost,nodes:[{name:this.name,value:this.value},n.content]}),[4,this.spread(t)]);case 2:r.sent(),this.dumpChanges(),r.label=3;case 3:(1===n.id&&!e||2===n.id)&&(this.handleReturnedInfoFromSpread(n,t),this.dumpChanges()),1!==n.id||this.rootOfIndexing||(e?this.returnTo.push(n.content.name):(console.log(this.name,">",n.content.name),this.send({protocol:"CSTP",content:{message:"Dear Neighbor hear is my name and the package provides you the cost to me. Follow the CSTP.",discoveredLinks:[{cost:t.cost,nodes:[{name:this.name,value:this.value},n.content]}]},target:n.content.name})),this.dumpChanges()),this.WAITING_FOR_BRIDGES&&0===this.WAITING_FOR_BRIDGES.length&&(this.handleSpreadFinished(),this.dumpChanges()),r.label=4;case 4:return[2]}})})},t.prototype.buildCase=function(t){var n=[t.from,t.discoveredLinks,t.mst],e=n.findIndex(function(t){return!0==!!t})+1;return{id:e,content:t=n[e-1]}},t.prototype.handleCase3=function(t,n){this.finishMST(n.content),t.destination!==this.name&&(t.target=this.ROUTING_TABLE.find(function(n){return n.target===t.destination}).nextHop,this.send(t))},t.prototype.spread=function(t){return c(this,void 0,void 0,function(){var n,e=this;return a(this,function(r){switch(r.label){case 0:return[4,this.connection.ping];case 1:return n=r.sent(),this.WAITING_FOR_BRIDGES=n.filter(function(n){return n!==t.content.from.name}),this.WAITING_FOR_BRIDGES.forEach(function(t){return e.send({protocol:"CSTP",content:{message:"Dear Neighbor hear is my name and the package provides you the cost to me. Follow the CSTP.",from:{name:e.name,value:e.value}},target:t})}),[2]}})})},t.prototype.handleReturnedInfoFromSpread=function(t,n){var e;"C"===this.name&&console.log("asdasd",this.WAITING_FOR_BRIDGES,t,n);var r=this.WAITING_FOR_BRIDGES.findIndex(function(t){return t===n.sender});-1!==r&&this.WAITING_FOR_BRIDGES.splice(r,1);var o=t.content;1===t.id?o=[{cost:n.cost,nodes:[{name:this.name,value:this.value},o]}]:-1===o[o.length-1].cost&&(o[o.length-1].cost=n.cost,o[o.length-1].nodes.push({name:this.name,value:this.value})),(e=this.DISCOVERED_LINKS).push.apply(e,o)},t.prototype.finishMST=function(t){var n=new u(t);this.MST=n,this.ROUTING_TABLE=this.MST.getRoutingTable(this.name),this.connection.finishedIndexing.next(n)},t.prototype.handleSpreadFinished=function(){this.sendDiscoveredLinksBack(),this.INDEXED=!0,this.rootOfIndexing?this.shareMst():this.connection.finishedIndexing.next()},t.prototype.shareMst=function(){var t=this,n=this.getLinks();this.finishMST(n),this.ROUTING_TABLE.forEach(function(e){t.send({protocol:"CSTP",content:{message:"Dear Neighbor hear is my name and the package provides you the cost to me. Follow the CSTP.",mst:n},target:e.nextHop,destination:e.target})})},t.prototype.getLinks=function(){var t=[];return this.DISCOVERED_LINKS.forEach(function(n){t.find(function(t){return-1!==n.nodes.findIndex(function(n){return n.name===t.nodes[0].name})&&-1!==n.nodes.findIndex(function(n){return n.name===t.nodes[1].name})})||t.push(n)}),t.slice()},t.prototype.sendDiscoveredLinksBack=function(){var t=this;this.returnTo.forEach(function(n){t.send({protocol:"CSTP",content:{message:"Dear Neighbor hear are my discovered links, you may concat them with yours and send them back!",discoveredLinks:t.DISCOVERED_LINKS.concat([{cost:-1,nodes:[{name:t.name,value:t.value}]}])},target:n})})},t}(),d=function(t,n){return(d=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)};function f(t,n){function e(){this.constructor=t}d(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}function l(t){return"function"==typeof t}var p=!1,b={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;p=t},get useDeprecatedSynchronousErrorHandling(){return p}};function m(t){setTimeout(function(){throw t})}var y={closed:!0,next:function(t){},error:function(t){if(b.useDeprecatedSynchronousErrorHandling)throw t;m(t)},complete:function(){}},v=Array.isArray||function(t){return t&&"number"==typeof t.length};function g(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map(function(t,n){return n+1+") "+t.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}g.prototype=Object.create(Error.prototype);var _=g,E=function(){function t(t){this.closed=!1,this._parent=null,this._parents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}var n;return t.prototype.unsubscribe=function(){var t,n=!1;if(!this.closed){var e=this._parent,r=this._parents,o=this._unsubscribe,i=this._subscriptions;this.closed=!0,this._parent=null,this._parents=null,this._subscriptions=null;for(var s,u=-1,c=r?r.length:0;e;)e.remove(this),e=++u<c&&r[u]||null;if(l(o))try{o.call(this)}catch(e){n=!0,t=e instanceof _?w(e.errors):[e]}if(v(i))for(u=-1,c=i.length;++u<c;){var a=i[u];if(null!==(s=a)&&"object"==typeof s)try{a.unsubscribe()}catch(e){n=!0,t=t||[],e instanceof _?t=t.concat(w(e.errors)):t.push(e)}}if(n)throw new _(t)}},t.prototype.add=function(n){var e=n;switch(typeof n){case"function":e=new t(n);case"object":if(e===this||e.closed||"function"!=typeof e.unsubscribe)return e;if(this.closed)return e.unsubscribe(),e;if(!(e instanceof t)){var r=e;(e=new t)._subscriptions=[r]}break;default:if(!n)return t.EMPTY;throw new Error("unrecognized teardown "+n+" added to Subscription.")}if(e._addParent(this)){var o=this._subscriptions;o?o.push(e):this._subscriptions=[e]}return e},t.prototype.remove=function(t){var n=this._subscriptions;if(n){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}},t.prototype._addParent=function(t){var n=this._parent,e=this._parents;return n!==t&&(n?e?-1===e.indexOf(t)&&(e.push(t),!0):(this._parents=[t],!0):(this._parent=t,!0))},t.EMPTY=((n=new t).closed=!0,n),t}();function w(t){return t.reduce(function(t,n){return t.concat(n instanceof _?n.errors:n)},[])}var S="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),I=function(t){function n(e,r,o){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=y;break;case 1:if(!e){i.destination=y;break}if("object"==typeof e){e instanceof n?(i.syncErrorThrowable=e.syncErrorThrowable,i.destination=e,e.add(i)):(i.syncErrorThrowable=!0,i.destination=new x(i,e));break}default:i.syncErrorThrowable=!0,i.destination=new x(i,e,r,o)}return i}return f(n,t),n.prototype[S]=function(){return this},n.create=function(t,e,r){var o=new n(t,e,r);return o.syncErrorThrowable=!1,o},n.prototype.next=function(t){this.isStopped||this._next(t)},n.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},n.prototype._unsubscribeAndRecycle=function(){var t=this._parent,n=this._parents;return this._parent=null,this._parents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parent=t,this._parents=n,this},n}(E),x=function(t){function n(n,e,r,o){var i,s=t.call(this)||this;s._parentSubscriber=n;var u=s;return l(e)?i=e:e&&(i=e.next,r=e.error,o=e.complete,e!==y&&(l((u=Object.create(e)).unsubscribe)&&s.add(u.unsubscribe.bind(u)),u.unsubscribe=s.unsubscribe.bind(s))),s._context=u,s._next=i,s._error=r,s._complete=o,s}return f(n,t),n.prototype.next=function(t){if(!this.isStopped&&this._next){var n=this._parentSubscriber;b.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?this.__tryOrSetError(n,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},n.prototype.error=function(t){if(!this.isStopped){var n=this._parentSubscriber,e=b.useDeprecatedSynchronousErrorHandling;if(this._error)e&&n.syncErrorThrowable?(this.__tryOrSetError(n,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(n.syncErrorThrowable)e?(n.syncErrorValue=t,n.syncErrorThrown=!0):m(t),this.unsubscribe();else{if(this.unsubscribe(),e)throw t;m(t)}}},n.prototype.complete=function(){var t=this;if(!this.isStopped){var n=this._parentSubscriber;if(this._complete){var e=function(){return t._complete.call(t._context)};b.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?(this.__tryOrSetError(n,e),this.unsubscribe()):(this.__tryOrUnsub(e),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(t,n){try{t.call(this._context,n)}catch(t){if(this.unsubscribe(),b.useDeprecatedSynchronousErrorHandling)throw t;m(t)}},n.prototype.__tryOrSetError=function(t,n,e){if(!b.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{n.call(this._context,e)}catch(n){return b.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=n,t.syncErrorThrown=!0,!0):(m(n),!0)}return!1},n.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},n}(I);var O="function"==typeof Symbol&&Symbol.observable||"@@observable";function T(){}function k(t){return t?1===t.length?t[0]:function(n){return t.reduce(function(t,n){return n(t)},n)}:T}var D=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r=this.operator,o=function(t,n,e){if(t){if(t instanceof I)return t;if(t[S])return t[S]()}return t||n||e?new I(t,n,e):new I(y)}(t,n,e);if(r?o.add(r.call(o,this.source)):o.add(this.source||b.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),b.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){b.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=n),!function(t){for(;t;){var n=t,e=n.closed,r=n.destination,o=n.isStopped;if(e||o)return!1;t=r&&r instanceof I?r:null}return!0}(t)?console.warn(n):t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=P(n))(function(n,r){var o;o=e.subscribe(function(n){try{t(n)}catch(t){r(t),o&&o.unsubscribe()}},r,n)})},t.prototype._subscribe=function(t){var n=this.source;return n&&n.subscribe(t)},t.prototype[O]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 0===t.length?this:k(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=P(t))(function(t,e){var r;n.subscribe(function(t){return r=t},function(t){return e(t)},function(){return t(r)})})},t.create=function(n){return new t(n)},t}();function P(t){if(t||(t=b.Promise||Promise),!t)throw new Error("no Promise impl found");return t}function B(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}B.prototype=Object.create(Error.prototype);var N=B,C=function(t){function n(n,e){var r=t.call(this)||this;return r.subject=n,r.subscriber=e,r.closed=!1,r}return f(n,t),n.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,n=t.observers;if(this.subject=null,n&&0!==n.length&&!t.isStopped&&!t.closed){var e=n.indexOf(this.subscriber);-1!==e&&n.splice(e,1)}}},n}(E),R=function(t){function n(n){var e=t.call(this,n)||this;return e.destination=n,e}return f(n,t),n}(I),j=function(t){function n(){var n=t.call(this)||this;return n.observers=[],n.closed=!1,n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return f(n,t),n.prototype[S]=function(){return new R(this)},n.prototype.lift=function(t){var n=new L(this,this);return n.operator=t,n},n.prototype.next=function(t){if(this.closed)throw new N;if(!this.isStopped)for(var n=this.observers,e=n.length,r=n.slice(),o=0;o<e;o++)r[o].next(t)},n.prototype.error=function(t){if(this.closed)throw new N;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var n=this.observers,e=n.length,r=n.slice(),o=0;o<e;o++)r[o].error(t);this.observers.length=0},n.prototype.complete=function(){if(this.closed)throw new N;this.isStopped=!0;for(var t=this.observers,n=t.length,e=t.slice(),r=0;r<n;r++)e[r].complete();this.observers.length=0},n.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},n.prototype._trySubscribe=function(n){if(this.closed)throw new N;return t.prototype._trySubscribe.call(this,n)},n.prototype._subscribe=function(t){if(this.closed)throw new N;return this.hasError?(t.error(this.thrownError),E.EMPTY):this.isStopped?(t.complete(),E.EMPTY):(this.observers.push(t),new C(this,t))},n.prototype.asObservable=function(){var t=new D;return t.source=this,t},n.create=function(t,n){return new L(t,n)},n}(D),L=function(t){function n(n,e){var r=t.call(this)||this;return r.destination=n,r.source=e,r}return f(n,t),n.prototype.next=function(t){var n=this.destination;n&&n.next&&n.next(t)},n.prototype.error=function(t){var n=this.destination;n&&n.error&&this.destination.error(t)},n.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},n.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):E.EMPTY},n}(j),M=function(){return function(t){this.send=new j,this.receive=new j,this.finishedIndexing=new j,this.ping=new Promise(function(n){return n(t)})}}(),A=function(){return function(t,n,e,r){var o=this;this.protocol=t,this.content=n,this.target=e,this.destination=e;var i=r.find(function(t){return t.target===o.target});this.target=i.nextHop}}(),F=function(){var t=document.getElementById("container_target");t.childNodes.forEach(function(t){return t.remove()}),t.childNodes.forEach(function(t){return t.remove()}),t.childNodes.forEach(function(t){return t.remove()});t.insertAdjacentElement("beforeend",(new DOMParser).parseFromString('\n<div class="item" id="init_pkg" style="display: flex">\n    <div style="height: 100%; width: 90%; justify-self: center; align-self: center">\n        <h3>Packages:</h3>\n        <div id="pkg_s_target">\n    </div>\n</div>\n    \n</div>\n',"text/html").getElementById("init_pkg"))},G=function(t){var n=document.getElementById("container_target");t.sort(function(t,n){return t.name<n.name?-1:t.name>n.name?1:0}).forEach(function(t){n.insertAdjacentElement("beforeend",(new DOMParser).parseFromString(function(t){return'\n<div class="item">\n    <div class="item-content" id="bridge_'+t.value+'">\n        <h3>Bridge '+t.name+"</h3>\n    <div>\n</div>\n"}(t),"text/html").getElementById("bridge_"+t.value))})},H=0,K=function(t,n){var e=document.getElementById("pkg_s_target"),r=H++;return e.insertAdjacentElement("beforeend",(new DOMParser).parseFromString(function(t,n){return'\n<div id="pkg_'+r+'">\n    '+n+" -> "+t.target+" : "+t.cost+"\n</div>\n"}(t,n),"text/html").getElementById("pkg_"+r)),function(){e.removeChild(document.getElementById("pkg_"+r))}},U=function(t,n){if(-1===n.findIndex(function(t){return t.BLOCKED()})){var e=document.getElementById("pkg_test_target");e.insertAdjacentElement("beforeend",(new DOMParser).parseFromString('\n<div class="item" id="pkg-card" style="\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n">\n    <h3>Send a sample package through with the new topology</h3>\n</div>\n',"text/html").getElementById("pkg-card")),e=document.getElementById("pkg-card");var r=n.map(function(t){return t.name}),o=function(t){return'\n<label id="l_'+t+'" for="'+t+'">Send '+t+':</label>\n<select id="'+t+'">\n    '+r.map(function(t){return'<option value="'+t+'">'+t+"</option>\n    "})+"\n</select>\n"},i=function(t){e.insertAdjacentElement("beforeend",(new DOMParser).parseFromString(o(t)+"<br>","text/html").getElementById("l_"+t)),e.insertAdjacentElement("beforeend",(new DOMParser).parseFromString(o(t),"text/html").getElementById(t))};i("from"),i("to");e.insertAdjacentElement("beforeend",(new DOMParser).parseFromString('\n<button id="test_send">Send</button>\n',"text/html").getElementById("test_send")),document.getElementById("test_send").addEventListener("click",function(){return t=document.getElementById("from").value,e=document.getElementById("to").value,r=n.find(function(n){return n.name===t}),o=new A("SOME_NORMAL","Greetings from"+r.name,e,r.ROUTING_TABLE),void r.send(o);var t,e,r,o})}document.getElementById("bridge_"+t.value).replaceWith((new DOMParser).parseFromString(function(t){return'\n<div class="item" id="bridge_'+t.value+'">\n    <div class="item-content" style="width: 80%; height: 100%; overflow-y: auto; overflow-x: hidden; '+(t.BLOCKED()?"":"box-shadow: 5px 5px 4px #33b040 !important;")+'">\n        <h3>Bridge '+t.name+"</h3>\n        "+(t.rootOfIndexing?"Indexing Root!":"")+"<br>\n        Known links: [<br><BLOCKQUOTE>"+t.DISCOVERED_LINKS.map(function(t){return t.nodes.map(function(t){return t.name}).join("-")+":"+t.cost}).join(",<br>")+"</BLOCKQUOTE><br>]<br>\n        Returning Data to: [<br><BLOCKQUOTE>"+t.returnTo.join(",<br>")+"</BLOCKQUOTE><br>]<br>\n        "+(!t.rootOfIndexing&&t.INDEXED?"<br>Node has finished indexing!<br>Returning Data to "+t.returnTo.join(",<br>"):"")+"<br>\n        "+(t.rootOfIndexing&&t.INDEXED?"<br>Network has finished indexing!<br>MST generated.<br>Sending MST to: [<br><BLOCKQUOTE>"+t.MST.allNodes.map(function(t){return t.name}).filter(function(n){return n!==t.name}).join(",<br>")+"</BLOCKQUOTE><br>]":"")+"\n        "+(t.BLOCKED()?"":"<br>Received MST. Routing Table: [<br><BLOCKQUOTE>"+t.ROUTING_TABLE.map(function(t){return"->"+t.target+" via "+t.nextHop}).join(",<br>")+"</BLOCKQUOTE><br>]")+"\n    </div>\n</div>\n"}(t),"text/html").getElementById("bridge_"+t.value))},V=function(t,n,e,r){return new(e||(e=Promise))(function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function u(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new e(function(n){n(t.value)}).then(s,u)}c((r=r.apply(t,n||[])).next())})},W=function(t,n){var e,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;s;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=n.call(t,s)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},Q=function(){return function(t,n){void 0===n&&(n=.5);var e=this;this.nodes=t,this.multiForCostInSeconds=n,this.bridges=[],this.startIndexingFromRandomBridge=function(){return new Promise(function(t){return V(e,void 0,void 0,function(){var n;return W(this,function(e){switch(e.label){case 0:return(n=this.bridges[Math.round(Math.random()*this.bridges.length)]).connection.finishedIndexing.subscribe(function(n){return t(n)}),[4,n.indexNetwork()];case 1:return e.sent(),[2]}})})})},F(),t.forEach(function(t){var n=t.links.map(function(t){return t.toNode}),r=new M(n);e.bridges.push(new h(t.name,t.value,r,function(t){return U(t,e.bridges)}))}),this.bridges.forEach(function(n){var r=t.find(function(t){return t.name===n.name}).links,o=r.map(function(t){return t.toNode});n.connection.send.subscribe(function(t){if(o.find(function(n){return n===t.target})){t.cost=r.find(function(n){return n.toNode===t.target}).cost;var i=K(t,n.name);setTimeout(function(){i(),e.bridges.find(function(n){return n.name===t.target}).connection.receive.next(t)},1e3*t.cost*e.multiForCostInSeconds)}})}),G(this.bridges)}}(),Y=document.getElementById("textIn"),X=document.getElementById("textOut"),z=document.getElementById("simulate_btn");Y.value="\nGraph mygraph {\n\t// Node\n\tA = 5;\n\tB = 1;\n\tC = 3;\n\tD = 7;\n\tE = 6;\n\tF = 4;\n\t\n\t// Links und zugeh. Kosten\n\tA - B : 10;\n\tA - C : 10;\n\tB - D : 15;\n\tB - E : 10;\n\tC - D : 3;\n\tC - E : 10;\n\tD - E : 2;\n\tD - F : 10;\n\tE - F : 2;\n}";z.addEventListener("click",function(){var t=function(t){for(var n=[],e=[],i=t.match(/(?<=Graph[ ])(\S+)/g)[0],s=t.match(/[^\s]+(?= =)|(?<== )[1-9]*/g),u=t.match(/[^\s]+(?= -)|[^\s]+(?= :)|(?<=: )[0-9]*/g),c=0;c<u.length;c+=3)n.push({nodes:[u[c],u[c+1]],cost:+u[c+2]});var a=function(t){var i=s[t],u=+s[t+1],c=n.filter(function(t){return-1!==t.nodes.findIndex(function(t){return t===i})}).map(function(t){return new r(t.nodes.find(function(t){return t!==i}),t.cost)});e.push(new o(i,u,c))};for(c=0;c<s.length;c+=2)a(c);return{graphName:i,nodes:e}}(Y.value);new Q(t.nodes,+document.getElementById("mult").value).startIndexingFromRandomBridge().then(function(n){var e;X.value=(e=n,"\nSpanning-Tree of "+t.graphName+" {\n\tRoot: "+e.root.name+";\n\t"+e.linkToString()+"\n}")})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,